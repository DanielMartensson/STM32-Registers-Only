
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000428  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000428  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000430  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000434  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000434  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000144e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004aa  00000000  00000000  00021482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ac5  00000000  00000000  00021c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002500  00000000  00000000  0003572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da36  00000000  00000000  00037c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  000b56b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000410 	.word	0x08000410

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000410 	.word	0x08000410

080001d4 <main>:
#include <main.h>

int main(){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	/* Start the HSE clock */
	RCC->CR |= (1 << 16);
 80001da:	4b3c      	ldr	r3, [pc, #240]	; (80002cc <main+0xf8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a3b      	ldr	r2, [pc, #236]	; (80002cc <main+0xf8>)
 80001e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e4:	6013      	str	r3, [r2, #0]

	/* Check if the HSE clock is ready */
	while(!(RCC->CR & (1 << 17)));
 80001e6:	bf00      	nop
 80001e8:	4b38      	ldr	r3, [pc, #224]	; (80002cc <main+0xf8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f9      	beq.n	80001e8 <main+0x14>

	/* Now is the HSE clock ready - Time to select it as system clock */
	RCC->CFGR |= 0b01;
 80001f4:	4b35      	ldr	r3, [pc, #212]	; (80002cc <main+0xf8>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	4a34      	ldr	r2, [pc, #208]	; (80002cc <main+0xf8>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6093      	str	r3, [r2, #8]

	/* Check if the HSE clock is selected */
	while(!(RCC->CFGR & 0b0100));
 8000200:	bf00      	nop
 8000202:	4b32      	ldr	r3, [pc, #200]	; (80002cc <main+0xf8>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f003 0304 	and.w	r3, r3, #4
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <main+0x2e>

	/* Prescaler AHB from 8 MHz to 4 MHz */
	RCC->CFGR |= (0b1000 << 4);
 800020e:	4b2f      	ldr	r3, [pc, #188]	; (80002cc <main+0xf8>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a2e      	ldr	r2, [pc, #184]	; (80002cc <main+0xf8>)
 8000214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000218:	6093      	str	r3, [r2, #8]

	/* Prescaler APB1 from 4 MHz to 500 kHz (16 division) times 2 if prescaler is > 1 */
	RCC->CFGR |= (0b111 << 10);
 800021a:	4b2c      	ldr	r3, [pc, #176]	; (80002cc <main+0xf8>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	4a2b      	ldr	r2, [pc, #172]	; (80002cc <main+0xf8>)
 8000220:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000224:	6093      	str	r3, [r2, #8]

	/* Enable for GPIOA */
	RCC->AHB1ENR |= 1;
 8000226:	4b29      	ldr	r3, [pc, #164]	; (80002cc <main+0xf8>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	4a28      	ldr	r2, [pc, #160]	; (80002cc <main+0xf8>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6313      	str	r3, [r2, #48]	; 0x30

	/* Enable TIM2 */
	RCC->APB1ENR |= 1;
 8000232:	4b26      	ldr	r3, [pc, #152]	; (80002cc <main+0xf8>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000236:	4a25      	ldr	r2, [pc, #148]	; (80002cc <main+0xf8>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6413      	str	r3, [r2, #64]	; 0x40

	/* Enable counter and set it as internal clock */
	TIM2->CR1 |= 1;
 800023e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]

	/* Set prescaler for TIM2 */
	TIM2->PSC = 499;
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000256:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set auto-reload for TIM2 */
	TIM2->ARR = 0xFFFF;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Declare PA5 as digital output */
	GPIOA->MODER |= 0b10000000000;
 8000262:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <main+0xfc>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <main+0xfc>)
 8000268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800026c:	6013      	str	r3, [r2, #0]

	/* Declare the digital output PA5 as push-pull */
	GPIOA->OTYPER |= (0 << 5);
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <main+0xfc>)
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <main+0xfc>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	6053      	str	r3, [r2, #4]

	/* Blink - SR latch */
	const uint32_t wait = 1000;
 8000276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027a:	607b      	str	r3, [r7, #4]
	while(1){
		/* Set */
		GPIOA->BSRR |= (1 << 5);
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0xfc>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <main+0xfc>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]

		/* Delay 1 second */
		uint32_t tickstart = TIM2->CNT;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800028e:	603b      	str	r3, [r7, #0]
		while((TIM2->CNT - tickstart) < wait){}
 8000290:	bf00      	nop
 8000292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d8f7      	bhi.n	8000292 <main+0xbe>

		/* Reset the set */
		GPIOA->BSRR |= (1 << 21);
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0xfc>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <main+0xfc>)
 80002a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ac:	6193      	str	r3, [r2, #24]
		tickstart = TIM2->CNT;
 80002ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b4:	603b      	str	r3, [r7, #0]
		while((TIM2->CNT - tickstart) < wait){}
 80002b6:	bf00      	nop
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d8f7      	bhi.n	80002b8 <main+0xe4>
	while(1){
 80002c8:	e7d8      	b.n	800027c <main+0xa8>
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000

080002d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <NMI_Handler+0x4>

080002da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <HardFault_Handler+0x4>

080002e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <MemManage_Handler+0x4>

080002e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <BusFault_Handler+0x4>

080002ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <UsageFault_Handler+0x4>

080002f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000320:	f000 f83e 	bl	80003a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <SystemInit+0x20>)
 800032e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <SystemInit+0x20>)
 8000334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800034c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000352:	490e      	ldr	r1, [pc, #56]	; (800038c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000368:	4c0b      	ldr	r4, [pc, #44]	; (8000398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000376:	f7ff ffd7 	bl	8000328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037a:	f000 f825 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037e:	f7ff ff29 	bl	80001d4 <main>
  bx  lr    
 8000382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000384:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000390:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 8000394:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000398:	20000024 	.word	0x20000024

0800039c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_IncTick+0x20>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_IncTick+0x24>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4413      	add	r3, r2
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <HAL_IncTick+0x24>)
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000
 80003c4:	20000020 	.word	0x20000020

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4d0d      	ldr	r5, [pc, #52]	; (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003ce:	1b64      	subs	r4, r4, r5
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2600      	movs	r6, #0
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4d0b      	ldr	r5, [pc, #44]	; (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	; (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2600      	movs	r6, #0
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
